using System;
using System.Diagnostics;
using System.Threading;
using System.Runtime.CompilerServices;
using BenchmarkDotNet;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Extensions;
using BenchmarkDotNet.Helpers;
using BenchmarkDotNet.Running;
$TargetTypeNamespace$
$TargetMethodReturnTypeNamespace$

$AdditionalLogic$

namespace BenchmarkDotNet.Autogenerated
{
    public class Program : global::$TargetTypeName$
    {
        private IJob job = Job.Default$TargetBenchmarkTaskArguments$; // TODO

        public static void Main(string[] args)
        {
            try
            {
#if DNX
                // we just start dotnet.exe that does some magic and starts this program
                // since high priority is not inherited (http://stackoverflow.com/a/3798549/5852046), we need to set it up here 
                Process.GetCurrentProcess().EnsureHighPriority();
                $Affinity$
#endif

				Program instance = new Program();
				$ParamsContent$
				instance.setupAction();
				instance.targetAction();
                System.Console.WriteLine(EnvironmentHelper.GetCurrentInfo().ToFormattedString().AddPrefixMultiline("// "));
                System.Console.WriteLine();
                instance.RunBenchmark();
            }
            catch (Exception ex)
            {
                System.Console.WriteLine(ex);
                throw;
            }
        }

        public Program()
        {
            setupAction = $SetupMethodName$;
            idleAction = Idle;
            targetAction = $TargetMethodName$;
        }

        $TargetMethodResultHolder$
        private Action setupAction;
        private $TargetMethodDelegateType$ targetAction;
        private $IdleMethodDelegateType$ idleAction;

        public void RunBenchmark()
        {
            new MethodInvoker().Invoke(job, $OperationsPerInvoke$, setupAction, targetAction, idleAction);
        }

        private $IdleMethodReturnType$ Idle()
        {
            $IdleImplementation$
        }
    }
}
