using System;
using System.Diagnostics;
using System.Threading;
using System.Runtime.CompilerServices;
using BenchmarkDotNet;
using BenchmarkDotNet.Tasks;
using $TargetTypeNamespace$;
using $TargetMethodReturnTypeNamespace$;

namespace BenchmarkDotNet.Autogenerated
{
    public class Program : $TargetType$
	{        
        public static void Main(string[] args)
		{
            System.Console.WriteLine(BenchmarkDotNet.EnvironmentHelper.GetFullEnvironmentInfo());
			Program instance = new Program();
			instance.$TargetMethodDelegate$ = $TargetMethodDelegateDefinition$;
			instance.$DummyDelegate$ = $DummyDelegateDefinition$;
            var settings = BenchmarkSettings.Parse(args);
            instance.RunBenchmark(settings);
			System.Console.WriteLine("// Benchmark finished");
        }

		$TargetMethodDelegateDeclaration$

		$DummyDelegateDeclaration$

$RunBenchmarkContent$

        private static void BenchmarkGcCollect()
        {
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
        }

        private static void BenchmarkPrintRunReport(Stopwatch stopwatch, long op)
        {
            BenchmarkPrintRunReport(stopwatch.ElapsedMilliseconds, stopwatch.ElapsedTicks, op);
        }

        private static void BenchmarkPrintRunReport(Stopwatch stopwatch, Stopwatch stopwatch2, long op)
        {
            BenchmarkPrintRunReport(
				Math.Max(0, stopwatch.ElapsedMilliseconds - stopwatch2.ElapsedMilliseconds), 
				Math.Max(1, stopwatch.ElapsedTicks - stopwatch2.ElapsedTicks),
				op);
        }

        private static void BenchmarkPrintRunReport(long ms, long ticks, long op)
        {
            var ns = (ticks / (double)Stopwatch.Frequency) * 1000000000;
            Console.WriteLine(string.Format(
				EnvironmentHelper.MainCultureInfo, 
				"{0:0.#} ms, {1:0.#} ns, {2} ticks, {3:0.####} ns/op, {4} op/s", 
				ms, ns, ticks, ns / op, op / (ns / 1000000000)));
        }

		private $TargetMethodReturnType$ Dummy()
		{
		    $DummyImplementation$
		}
    }
}