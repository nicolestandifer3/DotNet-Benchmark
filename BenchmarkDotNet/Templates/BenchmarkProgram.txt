using System;
using System.Diagnostics;
using System.Threading;
using System.Runtime.CompilerServices;
using BenchmarkDotNet;
using BenchmarkDotNet.Tasks;
$TargetTypeNamespace$
$TargetMethodReturnTypeNamespace$

$AdditionalLogic$

namespace BenchmarkDotNet.Autogenerated
{
    public class Program : $TargetTypeName$
    {
        private BenchmarkTask task = new BenchmarkTask($TargetBenchmarkTaskArguments$);

        public static void Main(string[] args)
        {
            try
            {
                System.Console.WriteLine(BenchmarkDotNet.EnvironmentHelper.GetFullEnvironmentInfo());
                var parameters = BenchmarkParameters.ParseArgs(args);
                BenchmarkState.Instance.IntParam = parameters.IntParam;
                Program instance = new Program();
                instance.RunBenchmark();
                System.Console.WriteLine("// Benchmark finished");
            }
            catch (Exception ex)
            {
                System.Console.WriteLine(ex);
                throw;
            }
        }

        public Program()
        {
            setupAction = $SetupMethodName$;
            idleAction = Idle;
            targetAction = $TargetMethodName$;
        }

        $TargetMethodResultHolder$
        private Action setupAction;
        private $TargetMethodDelegateType$ targetAction, idleAction;

$RunBenchmarkContent$

        private $TargetMethodReturnType$ Idle()
        {
            $IdleImplementation$
        }
    }
}
