#if DNX451
using System;
using System.Collections.Generic;
using System.IO;
using BenchmarkDotNet.Plugins.Loggers;
using BenchmarkDotNet.Plugins.Toolchains.Dnx;
using BenchmarkDotNet.Plugins.Toolchains.Results;
using Microsoft.Build.Utilities;
using NuGet.Commands;
using NuGet.Configuration;
using NuGet.ProjectModel;

namespace BenchmarkDotNet.Plugins.Toolchains.Dnx
{
    /// <summary>
    /// Nuget 3 will replace dnu restore in the future: https://github.com/aspnet/dnx/issues/3216
    /// as for now it produces project.lock.json slightly different from dnu restore
    /// </summary>
    internal class NugetRestorer
    {
        public NugetRestorer(IBenchmarkLogger benchmarkLogger)
        {
            Logger = new NugetLogger(benchmarkLogger);
        }

        private NugetLogger Logger { get; }

        internal bool Restore(BenchmarkGenerateResult generateResult, Benchmark benchmark)
        {
            const string projectName = "BenchmarkDotNet.Autogenerated";

            var projectJsonPath = Path.Combine(generateResult.DirectoryPath, BenchmarkDnxGenerator.ProjectFileName);
            var projectJsonContent = File.ReadAllText(projectJsonPath);

            var packageSpec = JsonPackageSpecReader.GetPackageSpec(projectJsonContent, projectName, projectJsonPath);
            var sources = GetPackageSources();

            var request = new RestoreRequest(packageSpec, sources, GetPackagesDir())
            {
                LockFilePath = Path.Combine(generateResult.DirectoryPath, "project.lock.json"),
                ExternalProjects = GetExternalProjects(generateResult.DirectoryPath, benchmark)
            };

            var command = new RestoreCommand(Logger, request);

            var restoreResult = command.ExecuteAsync().Result;

            if (restoreResult.Success)
            {
                restoreResult.Commit(Logger);
            }

            return restoreResult.Success;
        }

        private string GetPackagesDir()
        {
            var oldAndTheMostCommonPath = $@"{Environment.GetEnvironmentVariable("USERPROFILE")}\.dnx\packages\";
            if (Directory.Exists(oldAndTheMostCommonPath))
            {
                return oldAndTheMostCommonPath;
            }

            // it is going to become .nuget instead of.dnx in the future versions
            return $@"{Environment.GetEnvironmentVariable("USERPROFILE")}\.nuget\packages\";
        }

        private List<ExternalProjectReference> GetExternalProjects(string directoryPath, Benchmark benchmark)
        {
            var parentProjectProjectJsonPath = Path.Combine(directoryPath, @"..\", "project.json");
            if (!File.Exists(parentProjectProjectJsonPath))
            {
                return new List<ExternalProjectReference>(0);
            }

            // so somebody is debugging or running tests from VS now, lets add the ref. to the parent project
            return new List<ExternalProjectReference>
            {
                new ExternalProjectReference(
                    benchmark.Target.Type.Assembly.GetName().Name,
                    Path.Combine(directoryPath, @"..\"),
                    new []{ "BenchmarkDotNet" }) // this is a minimum
            };
        }

        private List<PackageSource> GetPackageSources()
        {
            // todo: read these from the right place
            return new List<PackageSource>
            {
                new PackageSource("https://www.nuget.org/api/v2/"),
            };
        }
    }
}
#endif