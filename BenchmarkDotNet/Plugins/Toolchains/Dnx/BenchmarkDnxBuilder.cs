#if DNX451
using System;
using System.IO;
using System.Linq;
using BenchmarkDotNet.Plugins.Toolchains.Results;
using Microsoft.Dnx.Compilation;
using Microsoft.Dnx.Compilation.Caching;
using Microsoft.Dnx.Runtime;
using Microsoft.Dnx.Runtime.Internal;
using Microsoft.Extensions.PlatformAbstractions;
using System.Runtime.Versioning;
using BenchmarkDotNet.Plugins.Loggers;

namespace BenchmarkDotNet.Plugins.Toolchains.Dnx
{
    internal class BenchmarkDnxBuilder : IBenchmarkBuilder
    {
        public BenchmarkDnxBuilder(IBenchmarkLogger benchmarkLogger)
        {
            NugetRestorer = new NugetRestorer(benchmarkLogger);
        }

        private NugetRestorer NugetRestorer { get; }

        public BenchmarkBuildResult Build(BenchmarkGenerateResult generateResult, Benchmark benchmark)
        {
            if (!NugetRestorer.Restore(generateResult, benchmark))
            {
                return new BenchmarkBuildResult(generateResult, false, new Exception("Nuget restore has failed"));
            }

            const string projectName = "BenchmarkDotNet.Autogenerated";
            const string configuration = "Release";
            const string aspect = null; // keep it null or string.Empy

            // https://github.com/aspnet/dnx => this repo is a great source of knowledge
            // you should take a look at Microsoft.Dnx.Compilation.LibraryExporter.ExportProject()

            var projectJsonPath = Path.Combine(generateResult.DirectoryPath, BenchmarkDnxGenerator.ProjectFileName);
            var outputPath = generateResult.DirectoryPath;

            var projectJsonContent = File.ReadAllText(projectJsonPath);
            var project = ProjectUtilities.GetProject(projectJsonContent, projectName, projectJsonPath);
            var targetFramework = project.GetTargetFrameworks().Single().FrameworkName;

            var runtimeEnvironment = PlatformServices.Default.Runtime;
            var benchmarkApplicationEnvironment = new ApplicationEnvironment(project, targetFramework, configuration, hostEnvironment: null);

            var defaultLoadContext = PlatformServices.Default.AssemblyLoadContextAccessor.Default;
            var compilationEngineContext = new CompilationEngineContext(benchmarkApplicationEnvironment, runtimeEnvironment, defaultLoadContext, new CompilationCache());

            var compilationEngine = new CompilationEngine(compilationEngineContext);
            
            var libraryExporter = compilationEngine.CreateProjectExporter(project, targetFramework, configuration);
            var projectCompiler = compilationEngine.GetCompiler(Project.DefaultRuntimeCompiler, defaultLoadContext);
            var compilationProjectContext = ToCompilationContext(project, targetFramework, configuration, aspect);

            var allDependencies = libraryExporter.GetAllDependencies(project.Name, aspect);

            var metadataProjectReference = projectCompiler.CompileProject(
                compilationProjectContext,
                () => allDependencies,
                () => CompositeResourceProvider.Default.GetResources(project));

            var diagnosticResult = metadataProjectReference.EmitAssembly(outputPath);

            Exception diagnosticException = diagnosticResult.Success
                ? null
                : new Exception(string.Join("\r\n", diagnosticResult.Diagnostics.Select(message => message.Message)));

            return new BenchmarkBuildResult(generateResult, diagnosticResult.Success, diagnosticException);
        }

        // copied from Microsoft.Dnx.Compilation.ProjectExtensions
        private static CompilationProjectContext ToCompilationContext(Project self, FrameworkName frameworkName, string configuration, string aspect)
        {
            return new CompilationProjectContext(
                new CompilationTarget(self.Name, frameworkName, configuration, aspect),
                self.ProjectDirectory,
                self.ProjectFilePath,
                self.Title,
                self.Description,
                self.Copyright,
                self.Version.ToString(),
                self.AssemblyFileVersion,
                self.EmbedInteropTypes,
                new CompilationFiles(
                    self.Files.PreprocessSourceFiles,
                    self.Files.SourceFiles),
                self.GetCompilerOptions(frameworkName, configuration));
        }
    }
}
#endif