using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using BenchmarkDotNet.Characteristics;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Extensions;
using BenchmarkDotNet.Helpers;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Toolchains.DotNetCli;
using JetBrains.Annotations;

namespace BenchmarkDotNet.Toolchains.CsProj
{
    [PublicAPI]
    public class CsProjGenerator : DotNetCliGenerator
    {
        public CsProjGenerator(
            string targetFrameworkMoniker, Func<Platform, string> platformProvider, string runtime = null) 
            : base(targetFrameworkMoniker, null, platformProvider, null, runtime)
        {
        }

        protected override string GetProjectFilePath(string binariesDirectoryPath)
            => Path.Combine(binariesDirectoryPath, "BenchmarkDotNet.Autogenerated.csproj");

        protected override void GenerateProject(Benchmark benchmark, ArtifactsPaths artifactsPaths, IResolver resolver)
        {
            string template = ResourceHelper.LoadTemplate("CsProj.txt");

            string platform = PlatformProvider(benchmark.Job.ResolveValue(EnvMode.PlatformCharacteristic, resolver));
            string content = SetPlatform(template, platform);
            content = SetCodeFileName(content, Path.GetFileName(artifactsPaths.ProgramCodePath));
            content = SetDependencyToExecutingAssembly(content, benchmark.Target.Type);
            content = SetTargetFrameworkMoniker(content, TargetFrameworkMoniker);
            content = SetRuntimeIdentifier(content, platform);
            content = content.Replace("$PROGRAMNAME$", artifactsPaths.ProgramName);
            content = content.Replace("$RUNTIMESETTINGS$", GetRuntimeSettings(benchmark.Job.Env.Gc, resolver));

            File.WriteAllText(artifactsPaths.ProjectFilePath, content);
        }

        private string SetDependencyToExecutingAssembly(string template, Type benchmarkTarget)
        {
            if (!GetSolutionRootDirectory(out var solutionRootDirectory))
            {
                throw new NotSupportedException($"Unable to find .sln or global.json file, hence can not find the csproj path, current directory was {Directory.GetCurrentDirectory()}");
            }

            var assemblyName = benchmarkTarget.GetTypeInfo().Assembly.GetName();
            var csprojName = $"{assemblyName.Name}.csproj";
            var csprojs = solutionRootDirectory.GetFiles(csprojName, SearchOption.AllDirectories);
            if (csprojs.Length != 1)
            {
                throw new NotSupportedException($"Unable to find single {csprojName} in {solutionRootDirectory} and its subfolders. Most probably the name of output exe is different than the name of the .csproj");
            }

            return template.Replace("$CSPROJPATH$", csprojs.Single().FullName);
        }

        private string GetRuntimeSettings(GcMode gcMode, IResolver resolver)
        {
            if (!gcMode.HasChanges)
                return string.Empty;

            return new StringBuilder(80)
                .AppendLine("<PropertyGroup>")
                    .AppendLine($"<ServerGarbageCollection>{gcMode.ResolveValue(GcMode.ServerCharacteristic, resolver).ToLowerCase()}</ServerGarbageCollection>")
                    .AppendLine($"<ConcurrentGarbageCollection>{gcMode.ResolveValue(GcMode.ConcurrentCharacteristic, resolver).ToLowerCase()}</ConcurrentGarbageCollection>")
                    .AppendLine($"<RetainVMGarbageCollection>{gcMode.ResolveValue(GcMode.RetainVmCharacteristic, resolver).ToLowerCase()}</RetainVMGarbageCollection>")
                .AppendLine("</PropertyGroup>")
                .ToString();
        }

        private string SetRuntimeIdentifier(string content, string platform)
        {
            if (string.IsNullOrEmpty(Runtime))
            {
                return content.Replace("$RUNTIMEID$", string.Empty);
            }

            /*
             * C:\Program Files\dotnet\sdk\1.0.0-rc3-004530\Sdks\Microsoft.NET.Sdk\build\Microsoft.NET.RuntimeIdentifierInference.targets(49,5): error : RuntimeIdentifier must be set for .NETFramework executables. Consider RuntimeIdentifier=win7-x86 or RuntimeIdentifier=win7-x64. [C:\Projects\BenchmarkDotNet\C_B_Job-RNOJWY\BenchmarkDotNet.Autogenerated.csproj]
             */
            return content.Replace("$RUNTIMEID$", $"<RuntimeIdentifier>{Runtime}-{platform}</RuntimeIdentifier>");
        }
    }
}