using System;
using System.IO;
using System.Linq;
using BenchmarkDotNet.Characteristics;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Helpers;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Toolchains.DotNetCli;
using System.Reflection;

namespace BenchmarkDotNet.Toolchains.CsProj
{
    public class CsProjGenerator : DotNetCliGenerator
    {
        public CsProjGenerator(string targetFrameworkMoniker, Func<Platform, string> platformProvider) 
            : base(targetFrameworkMoniker, null, platformProvider, null, null)
        {
        }

        protected override string GetProjectFilePath(string binariesDirectoryPath)
            => Path.Combine(binariesDirectoryPath, "BenchmarkDotNet.Autogenerated.csproj");

        protected override void GenerateProject(Benchmark benchmark, ArtifactsPaths artifactsPaths, IResolver resolver)
        {
            string template = ResourceHelper.LoadTemplate("CsProj.txt");

            string content = SetPlatform(template, PlatformProvider(benchmark.Job.ResolveValue(EnvMode.PlatformCharacteristic, resolver)));
            content = SetCodeFileName(content, Path.GetFileName(artifactsPaths.ProgramCodePath));
            content = SetDependencyToExecutingAssembly(content, benchmark.Target.Type);
            content = SetTargetFrameworkMoniker(content, TargetFrameworkMoniker);
            //content = SetGcMode(content, benchmark.Job.Env.Gc, resolver); todo: implement

            File.WriteAllText(artifactsPaths.ProjectFilePath, content);
        }

        protected override string SetDependencyToExecutingAssembly(string template, Type benchmarkTarget)
        {
            if (!GetSolutionRootDirectory(out var solutionRootDirectory))
            {
                throw new NotSupportedException("Unable to find .sln or global.json file, hence can not find the csproj path");
            }

            var assemblyName = benchmarkTarget.GetTypeInfo().Assembly.GetName();
            var csprojName = $"{assemblyName.Name}.csproj";
            var csprojs = solutionRootDirectory.GetFiles(csprojName, SearchOption.AllDirectories);
            if (csprojs.Length != 1)
            {
                throw new NotSupportedException($"Unable to find {csprojName} in {solutionRootDirectory}. Most probably the name of output exe is different than the name of the .csproj");
            }

            return template.Replace("$CSPROJPATH$", csprojs.Single().FullName);
        }
    }
}