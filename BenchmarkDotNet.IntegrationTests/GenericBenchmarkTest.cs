using System;
using System.Linq;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Running;
using Xunit;
using Xunit.Abstractions;

namespace BenchmarkDotNet.IntegrationTests
{
    public class GenericBenchmarkTest
    {
        private readonly ITestOutputHelper output;

        public GenericBenchmarkTest(ITestOutputHelper output)
        {
            this.output = output;
        }

        [Fact]
        public void Test()
        {
            var logger = new OutputLogger(output);
            var config = DefaultConfig.Instance.With(logger);

            BenchmarkRunner.Run<FlatClassBenchmark>(config);
            var expected1 = $"// ### Benchmark: SerializationLibrary1, Type: {typeof(FlatClassBenchmark).Name} ###";
            Assert.Contains(expected1, logger.GetLog());

            logger.ClearLog();
            BenchmarkRunner.Run<DoubleArrayBenchmark>(config);
            var expected2 = $"// ### Benchmark: SerializationLibrary2, Type: {typeof(DoubleArrayBenchmark).Name} ###";
            Assert.Contains(expected2, logger.GetLog());
        }
    }

    // From https://github.com/PerfDotNet/BenchmarkDotNet/issues/44
    public abstract class AbstractBenchmark<T>
    {
        private readonly T _value;
        private readonly Serializer1<T> _serializer1 = new Serializer1<T>();
        private readonly Serializer2<T> _serializer2 = new Serializer2<T>();

        protected AbstractBenchmark()
        {
            _value = CreateValue();
        }

        protected abstract T CreateValue();

        [Benchmark]
        public void SerializationLibrary1()
        {
            // Our direct type is BenchmarkDotNet.Autogenerated.Program,
            // which inherits from BenchmarkDotNet.IntegrationTests.FlatClassBenchmark
            Console.WriteLine($"// ### Benchmark: SerializationLibrary1, Type: {GetType().BaseType.Name} ###");
            string text = _serializer1.Serialize(_value);
        }

        [Benchmark]
        public void SerializationLibrary2()
        {
            // Our direct type is BenchmarkDotNet.Autogenerated.Program,
            // which inherits from BenchmarkDotNet.IntegrationTests.FlatClassBenchmark
            Console.WriteLine($"// ### Benchmark: SerializationLibrary2, Type: {GetType().BaseType.Name} ###");
            string text = _serializer2.Serialize(_value);
        }
    }

    [Config(typeof(SingleRunFastConfig))]
    public class FlatClassBenchmark : AbstractBenchmark<FlatClass>
    {
        protected override FlatClass CreateValue() => new FlatClass() { Number = 42, Text = "64", TimeStamp = DateTime.UtcNow };
    }

    [Config(typeof(SingleRunFastConfig))]
    public class DoubleArrayBenchmark : AbstractBenchmark<double[]>
    {
        protected override double[] CreateValue() => Enumerable.Repeat(42.0, 100 * 1000).ToArray();
    }

    public class FlatClass
    {
        public int Number { get; set; }
        public string Text { get; set; }
        public DateTime TimeStamp { get; set; }
    }

    public class Serializer1<T>
    {
        public string Serialize(T value)
        {
            return "";
        }
    }

    public class Serializer2<T>
    {
        public string Serialize(T value)
        {
            return "";
        }
    }
}
