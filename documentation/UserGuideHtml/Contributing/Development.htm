<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Development - BenchmarkDotNet Documentation</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../index.htm"><i class="fa fa-home"></i> BenchmarkDotNet Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../index.htm">Home</a>
</li>

<li class="tocentry"><a href="../GettingStarted.htm">Getting Started</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Configuration.htm">Configuration</a></span>
</li>
<li class="tocentry"><a href="../HowToRun.htm">How to run your benchmarks</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Advancedfeatures.htm">Advanced features</a></span>
</li>
<li class="tocentry"><a href="../HowItWorks.htm">How it works</a>
</li>
<li class="tocentry"><a href="../RulesOfBenchmarking.htm">Rules of benchmarking</a>
</li>
<li class="tocentry"><a href="../faq.htm">FAQ</a>
</li>
<li class="tocentry"><a href="../Team.htm">Team</a>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../Contributing.htm">Contributing</a></span></li>
<li class="tocentry"><a href="../Contributing/Building.htm">Building</a>
</li>
<li class="tocentry"><a href="../Contributing/Debugging.htm">Debugging</a>
</li>
<li class="tocentry"><a href="../Contributing/RunningTests.htm">Running tests</a>
</li>
<li class="tocentry current"><a class="current" href="../Contributing/Development.htm">Development</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#branches">Branches</a></li>
<li class="tocentry"><a href="#new-project-files">New project files</a></li>
<li class="tocentry"><a href="#new-dependencies">New dependencies</a></li>
</ul>
<li class="tocentry"><a href="../Contributing/Miscellaneous.htm">Miscellaneous topics</a>
</li>

</ul>
</li>
<li class="tocentry"><a href="../license.htm">License</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">BenchmarkDotNet Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../index.htm">Home</a></li> / <li><a href="../Contributing.htm">Contributing</a></li> / <li><a href="../Contributing/Development.htm">Development</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="development">Development<a class="headerlink" href="#development" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<h2 id="branches">Branches<a class="headerlink" href="#branches" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Please, use the <code>develop</code> branch for developing. The <code>master</code> branch should correspond the latest NuGet package of the library.</p>
<h2 id="new-project-files">New project files<a class="headerlink" href="#new-project-files" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>.csproj and package.config files have been replaced with .xproj and project.json files. project.json automatically references all .cs files so you 
don’t have to update it with every new class/interface/enum added (number of git conflicts has just dropped). It also has some side efects. 
For example if you create some subfolder in any of the folders that contain project.json file and put some .cs files there, then these files are 
going to be compiled as part of parent project by default. </p>
<p>The other side effect is that xproj displays all files by default:
<img src="/documentation/images/xprojDisplaysAllFilesByDefault.png?raw=true" alt="xproj displays all files by default" title="xproj displays all files by default" /></p>
<p>But if you want to include some files as resources, you have to do this in explicit way: </p>
<pre><code class="json">&quot;buildOptions&quot;: {
    &quot;embed&quot;: [ &quot;Templates/*.txt&quot;, &quot;Templates/*.R&quot;, &quot;Templates/*.json&quot; ]
}
</code></pre>

<p>Project.json allows us to target multiple frameworks with one file and manage all dependencies in single place. Simplicity over complexity! </p>
<pre><code class="json"> &quot;frameworks&quot;: {
    &quot;net40&quot;: {
      &quot;compilationOptions&quot;: {
        &quot;define&quot;: [ &quot;CLASSIC&quot; ]
      },
      &quot;frameworkAssemblies&quot;: {
        &quot;System.Management&quot;: &quot;4.0.0.0&quot;,
        &quot;System.Xml&quot;: &quot;4.0.0.0&quot;
      }
    },
    &quot;netstandard1.5&quot;: {
      &quot;buildOptions&quot;: {
        &quot;define&quot;: [ &quot;CORE&quot;]
      },
      &quot;dependencies&quot;: {
        &quot;System.Linq&quot;: &quot;4.1.0&quot;,
        &quot;System.Resources.ResourceManager&quot;: &quot;4.0.1&quot;,
        &quot;Microsoft.CSharp&quot;: &quot;4.0.1&quot;,
        &quot;Microsoft.Win32.Primitives&quot;: &quot;4.0.1&quot;,
        &quot;System.Console&quot;: &quot;4.0.0&quot;,
        &quot;System.Text.RegularExpressions&quot;: &quot;4.1.0&quot;,
        &quot;System.Threading&quot;: &quot;4.0.11&quot;,
        &quot;System.Reflection&quot;: &quot;4.1.0&quot;,
        &quot;System.Reflection.Primitives&quot;: &quot;4.0.1&quot;,
        &quot;System.Reflection.TypeExtensions&quot;: &quot;4.1.0&quot;,
        &quot;System.Threading.Thread&quot;: &quot;4.0.0&quot;,
        &quot;System.Diagnostics.Process&quot;: &quot;4.1.0&quot;,
        &quot;System.IO.FileSystem&quot;: &quot;4.0.1&quot;,
        &quot;System.Runtime.InteropServices.RuntimeInformation&quot;: &quot;4.0.0&quot;,
        &quot;System.Runtime.Serialization.Primitives&quot;: &quot;4.1.1&quot;,
        &quot;System.Diagnostics.Tools&quot;: &quot;4.0.1&quot;,
        &quot;System.Runtime.InteropServices&quot;: &quot;4.1.0&quot;,
        &quot;Microsoft.DotNet.InternalAbstractions&quot;: &quot;1.0.0&quot;,
        &quot;System.Reflection.Extensions&quot;: &quot;4.0.1&quot;,
        &quot;System.Diagnostics.Debug&quot;: &quot;4.0.11&quot;,
        &quot;System.Xml.XPath.XmlDocument&quot;: &quot;4.0.1&quot;
      }
    }
  }
</code></pre>

<p>Project.json.lock tells the compiler exactly where to look for our dependencies. You can produce it with „dotnet restore”. Sometimes VS will do this for you, sometimes you will have to do this on your own.</p>
<h2 id="new-dependencies">New dependencies<a class="headerlink" href="#new-dependencies" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>There are at least 3 types of dependencies. Project, package and build. Sample:</p>
<p><code>json
 &quot;dependencies&quot;: {
    &quot;BenchmarkDotNet&quot;: {
      &quot;target&quot;: &quot;project&quot;,
      &quot;version&quot;: &quot;1.0.0-*&quot;
    }
  }</code></p>
<p>When you want to add some dependency then you just add in in the right place in project.json. It depends on which platforms the library that you would like use supports.</p>
<h3 id="nohighlight">If it supports all frameworks<a class="headerlink" href="#nohighlight" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Just to move the dependencies to common dependencies (same level as frameworks, same thing applies to frameworkAssemblies).</p>
<pre><code class="json">  &quot;frameworks&quot;: {
    &quot;net40&quot;: { },
    &quot;netstandard1.5&quot;: { }
  },
  &quot;dependencies&quot;: {
    &quot;someCommonDependency&quot;: &quot;it's version&quot;
  }
</code></pre>

<h3 id="if-there-are-few-different-packagesversion">If there are few different packages/version<a class="headerlink" href="#if-there-are-few-different-packagesversion" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Specify both dependencies in explicit way:</p>
<pre><code class="json">    &quot;frameworks&quot;: {
    &quot;net40&quot;: { 
        &quot;dependencies&quot;: {
            &quot;someCommonDependency&quot;: &quot;exact version that supports net40&quot;
      }
    },
    &quot;netstandard1.5&quot;: { 
        &quot;dependencies&quot;: {
            &quot;someCommonDependency&quot;: &quot;exact version that supports netstandard1.5&quot;
      }
    }
  }
</code></pre>

<h3 id="if-the-desired-package-does-not-support-all-frameworks">If the desired package does not support all frameworks<a class="headerlink" href="#if-the-desired-package-does-not-support-all-frameworks" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Add it as dependency to specific framework, but in code you use ugly #if #endif to exclude it for other compilation targets. 
We define #CLASSIC, #CORE. In other OSS projects you can meet more complex names like #NET40, #NET451, #DNXCORE50 or #NETCORE. </p>
<pre><code class="cs">#if CLASSIC
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace BenchmarkDotNet.Loggers
{
    internal class MsBuildConsoleLogger : Logger
    {
        private ILogger Logger { get; set; }

        public MsBuildConsoleLogger(ILogger logger)
        {
            Logger = logger;
        }

        public override void Initialize(IEventSource eventSource)
        {
            // By default, just show errors not warnings
            if (eventSource != null)
                eventSource.ErrorRaised += OnEventSourceErrorRaised;
        }

        private void OnEventSourceErrorRaised(object sender, BuildErrorEventArgs e) =&gt;
            Logger.WriteLineError(&quot;// {0}({1},{2}): error {3}: {4}&quot;, e.File, e.LineNumber, e.ColumnNumber, e.Code, e.Message);
    }
}
#endif
</code></pre>

<h3 id="if-it-is-not-a-package-but-dllexe-file">If it is not a package, but dll/exe file<a class="headerlink" href="#if-it-is-not-a-package-but-dllexe-file" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Create a wrap for it. You can do this for VS, but currently it will not work with dotnet cli, since it is going to produce wrong path. This is why I recommend to do this manually. You just need to create new folder in solution's root, then put project.json file there and <strong>add the folder to global.json file</strong>. Sample wrap file:</p>
<pre><code class="json">{
  &quot;version&quot;: &quot;1.0.0-*&quot;,
  &quot;frameworks&quot;: {
    &quot;net40&quot;: {
      &quot;bin&quot;: {
        &quot;assembly&quot;: &quot;../CLRMD/Dia2Lib.dll&quot;
      }
    }
  }
}
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
BenchmarkDotNet Documentation. &copy;2013-2016. <a href='https://github.com/PerfDotNet/BenchmarkDotNet' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/packages/BenchmarkDotNet/' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>

</body>
</html>
